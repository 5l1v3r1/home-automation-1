// Code generated by jrpc. DO NOT EDIT.

package handler

import (
	context "context"
	http "net/http"

	"github.com/jakewright/home-automation/libraries/go/oops"
	"github.com/jakewright/home-automation/libraries/go/request"
	"github.com/jakewright/home-automation/libraries/go/response"
	"github.com/jakewright/home-automation/libraries/go/router"
	"github.com/jakewright/home-automation/libraries/go/slog"
	def "github.com/jakewright/home-automation/service.dmx/def"
)

type controller interface {
	GetDevice(*Request, *def.GetDeviceRequest) (*def.GetDeviceResponse, error)
	UpdateDevice(*Request, *def.UpdateDeviceRequest) (*def.UpdateDeviceResponse, error)
}

// Request wraps http.Request but exposes the context
type Request struct {
	context.Context
	*http.Request
}

// NewRouter returns a router with appropriate handlers set
func NewRouter(c controller) *router.Router {
	r := router.New()

	r.Handle("GET", "/device", func(w http.ResponseWriter, r *http.Request) {
		body := &def.GetDeviceRequest{}
		if err := request.Decode(r, body); err != nil {
			err = oops.Wrap(err, oops.ErrBadRequest, "failed to decode request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		if err := body.Validate(); err != nil {
			err = oops.Wrap(err, oops.ErrBadRequest, "failed to validate request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		req := &Request{
			Context: r.Context(),
			Request: r,
		}

		rsp, err := c.GetDevice(req, body)
		if err != nil {
			err = oops.WithMessage(err, "failed to handle request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		response.WriteJSON(w, rsp)
	})

	r.Handle("PATCH", "/device", func(w http.ResponseWriter, r *http.Request) {
		body := &def.UpdateDeviceRequest{}
		if err := request.Decode(r, body); err != nil {
			err = oops.Wrap(err, oops.ErrBadRequest, "failed to decode request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		if err := body.Validate(); err != nil {
			err = oops.Wrap(err, oops.ErrBadRequest, "failed to validate request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		req := &Request{
			Context: r.Context(),
			Request: r,
		}

		rsp, err := c.UpdateDevice(req, body)
		if err != nil {
			err = oops.WithMessage(err, "failed to handle request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		response.WriteJSON(w, rsp)
	})

	return r
}
