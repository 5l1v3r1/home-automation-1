// Code generated by jrpc. DO NOT EDIT.

package handler

import (
	context "context"
	http "net/http"

	"github.com/jakewright/home-automation/libraries/go/errors"
	"github.com/jakewright/home-automation/libraries/go/request"
	"github.com/jakewright/home-automation/libraries/go/response"
	"github.com/jakewright/home-automation/libraries/go/router"
	"github.com/jakewright/home-automation/libraries/go/slog"
	def "github.com/jakewright/home-automation/service.dmx/def"
)

// Request wraps http.Request but exposes the context
type Request struct {
	context.Context
	*http.Request
}

// DMXRouter wraps router.Router to provide a convenient way to set handlers
type DMXRouter struct {
	*router.Router
	getDevice               func(*Request, *def.GetDeviceRequest) (*def.GetDeviceResponse, error)
	updateDevice            func(*Request, *def.UpdateDeviceRequest) (*def.UpdateDeviceResponse, error)
	getDeviceHandlerFunc    http.HandlerFunc
	updateDeviceHandlerFunc http.HandlerFunc
}

// NewRouter returns a router that is ready to add handlers to
func NewRouter() *DMXRouter {
	rr := &DMXRouter{
		Router: router.New(),
	}

	rr.getDeviceHandlerFunc = func(w http.ResponseWriter, r *http.Request) {
		if rr.getDevice == nil {
			slog.Panicf("No handler exists for GET /device")
		}

		body := &def.GetDeviceRequest{}
		if err := request.Decode(r, body); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to decode request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		if err := body.Validate(); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to validate request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		req := &Request{
			Context: r.Context(),
			Request: r,
		}

		rsp, err := rr.getDevice(req, body)
		if err != nil {
			err = errors.WithMessage(err, "failed to handle request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		response.WriteJSON(w, rsp)
	}

	rr.Router.Handle("GET", "/device", rr.getDeviceHandlerFunc)

	rr.updateDeviceHandlerFunc = func(w http.ResponseWriter, r *http.Request) {
		if rr.updateDevice == nil {
			slog.Panicf("No handler exists for PATCH /device")
		}

		body := &def.UpdateDeviceRequest{}
		if err := request.Decode(r, body); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to decode request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		if err := body.Validate(); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to validate request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		req := &Request{
			Context: r.Context(),
			Request: r,
		}

		rsp, err := rr.updateDevice(req, body)
		if err != nil {
			err = errors.WithMessage(err, "failed to handle request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		response.WriteJSON(w, rsp)
	}

	rr.Router.Handle("PATCH", "/device", rr.updateDeviceHandlerFunc)

	return rr
}

func (r *DMXRouter) GetDevice(f func(*Request, *def.GetDeviceRequest) (*def.GetDeviceResponse, error)) *DMXRouter {
	r.getDevice = f
	return r
}

func (r *DMXRouter) UpdateDevice(f func(*Request, *def.UpdateDeviceRequest) (*def.UpdateDeviceResponse, error)) *DMXRouter {
	r.updateDevice = f
	return r
}
