// Code generated by jrpc. DO NOT EDIT.

package handler

import (
	context "context"
	http "net/http"

	"github.com/jakewright/home-automation/libraries/go/errors"
	"github.com/jakewright/home-automation/libraries/go/request"
	"github.com/jakewright/home-automation/libraries/go/response"
	"github.com/jakewright/home-automation/libraries/go/router"
	"github.com/jakewright/home-automation/libraries/go/slog"
	def "github.com/jakewright/home-automation/service.scene/def"
)

// Request wraps http.Request but exposes the context
type Request struct {
	context.Context
	*http.Request
}

// SceneRouter wraps router.Router to provide a convenient way to set handlers
type SceneRouter struct {
	*router.Router
	createScene            func(*Request, *def.CreateSceneRequest) (*def.CreateSceneResponse, error)
	readScene              func(*Request, *def.ReadSceneRequest) (*def.ReadSceneResponse, error)
	listScenes             func(*Request, *def.ListScenesRequest) (*def.ListScenesResponse, error)
	deleteScene            func(*Request, *def.DeleteSceneRequest) (*def.DeleteSceneResponse, error)
	setScene               func(*Request, *def.SetSceneRequest) (*def.SetSceneResponse, error)
	createSceneHandlerFunc http.HandlerFunc
	readSceneHandlerFunc   http.HandlerFunc
	listScenesHandlerFunc  http.HandlerFunc
	deleteSceneHandlerFunc http.HandlerFunc
	setSceneHandlerFunc    http.HandlerFunc
}

// NewRouter returns a router that is ready to add handlers to
func NewRouter() *SceneRouter {
	rr := &SceneRouter{
		Router: router.New(),
	}

	rr.createSceneHandlerFunc = func(w http.ResponseWriter, r *http.Request) {
		if rr.createScene == nil {
			slog.Panicf("No handler exists for POST /scenes")
		}

		body := &def.CreateSceneRequest{}
		if err := request.Decode(r, body); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to decode request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		if err := body.Validate(); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to validate request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		req := &Request{
			Context: r.Context(),
			Request: r,
		}

		rsp, err := rr.createScene(req, body)
		if err != nil {
			err = errors.WithMessage(err, "failed to handle request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		response.WriteJSON(w, rsp)
	}

	rr.Router.Handle("POST", "/scenes", rr.createSceneHandlerFunc)

	rr.readSceneHandlerFunc = func(w http.ResponseWriter, r *http.Request) {
		if rr.readScene == nil {
			slog.Panicf("No handler exists for GET /scene")
		}

		body := &def.ReadSceneRequest{}
		if err := request.Decode(r, body); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to decode request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		if err := body.Validate(); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to validate request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		req := &Request{
			Context: r.Context(),
			Request: r,
		}

		rsp, err := rr.readScene(req, body)
		if err != nil {
			err = errors.WithMessage(err, "failed to handle request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		response.WriteJSON(w, rsp)
	}

	rr.Router.Handle("GET", "/scene", rr.readSceneHandlerFunc)

	rr.listScenesHandlerFunc = func(w http.ResponseWriter, r *http.Request) {
		if rr.listScenes == nil {
			slog.Panicf("No handler exists for GET /scenes")
		}

		body := &def.ListScenesRequest{}
		if err := request.Decode(r, body); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to decode request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		if err := body.Validate(); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to validate request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		req := &Request{
			Context: r.Context(),
			Request: r,
		}

		rsp, err := rr.listScenes(req, body)
		if err != nil {
			err = errors.WithMessage(err, "failed to handle request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		response.WriteJSON(w, rsp)
	}

	rr.Router.Handle("GET", "/scenes", rr.listScenesHandlerFunc)

	rr.deleteSceneHandlerFunc = func(w http.ResponseWriter, r *http.Request) {
		if rr.deleteScene == nil {
			slog.Panicf("No handler exists for DELETE /scene")
		}

		body := &def.DeleteSceneRequest{}
		if err := request.Decode(r, body); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to decode request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		if err := body.Validate(); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to validate request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		req := &Request{
			Context: r.Context(),
			Request: r,
		}

		rsp, err := rr.deleteScene(req, body)
		if err != nil {
			err = errors.WithMessage(err, "failed to handle request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		response.WriteJSON(w, rsp)
	}

	rr.Router.Handle("DELETE", "/scene", rr.deleteSceneHandlerFunc)

	rr.setSceneHandlerFunc = func(w http.ResponseWriter, r *http.Request) {
		if rr.setScene == nil {
			slog.Panicf("No handler exists for POST /scene/set")
		}

		body := &def.SetSceneRequest{}
		if err := request.Decode(r, body); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to decode request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		if err := body.Validate(); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to validate request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		req := &Request{
			Context: r.Context(),
			Request: r,
		}

		rsp, err := rr.setScene(req, body)
		if err != nil {
			err = errors.WithMessage(err, "failed to handle request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		response.WriteJSON(w, rsp)
	}

	rr.Router.Handle("POST", "/scene/set", rr.setSceneHandlerFunc)

	return rr
}

func (r *SceneRouter) CreateScene(f func(*Request, *def.CreateSceneRequest) (*def.CreateSceneResponse, error)) *SceneRouter {
	r.createScene = f
	return r
}

func (r *SceneRouter) ReadScene(f func(*Request, *def.ReadSceneRequest) (*def.ReadSceneResponse, error)) *SceneRouter {
	r.readScene = f
	return r
}

func (r *SceneRouter) ListScenes(f func(*Request, *def.ListScenesRequest) (*def.ListScenesResponse, error)) *SceneRouter {
	r.listScenes = f
	return r
}

func (r *SceneRouter) DeleteScene(f func(*Request, *def.DeleteSceneRequest) (*def.DeleteSceneResponse, error)) *SceneRouter {
	r.deleteScene = f
	return r
}

func (r *SceneRouter) SetScene(f func(*Request, *def.SetSceneRequest) (*def.SetSceneResponse, error)) *SceneRouter {
	r.setScene = f
	return r
}
