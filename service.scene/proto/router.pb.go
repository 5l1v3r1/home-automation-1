// Code generated by protoc-gen-jrpc. DO NOT EDIT.

package sceneproto

import (
	"net/http"

	"github.com/jakewright/home-automation/libraries/go/request"
	"github.com/jakewright/home-automation/libraries/go/response"
	"github.com/jakewright/home-automation/libraries/go/router"
	"github.com/jakewright/home-automation/libraries/go/rpc"
	"github.com/jakewright/home-automation/libraries/go/slog"
)

// SceneRouter wraps router.Router to provide a convenient way to set handlers
type SceneRouter struct {
	*router.Router
	CreateScene func(*CreateSceneRequest) (*CreateSceneResponse, error)
	ReadScene   func(*ReadSceneRequest) (*ReadSceneResponse, error)
	ListScenes  func(*ListScenesRequest) (*ListScenesResponse, error)
	DeleteScene func(*DeleteSceneRequest) (*DeleteSceneResponse, error)
	SetScene    func(*SetSceneRequest) (*SetSceneResponse, error)
}

// NewRouter returns a router that is ready to add handlers to
func NewRouter() *SceneRouter {
	rr := &SceneRouter{
		Router: router.New(),
	}

	rr.Router.Handle("POST", "/scenes", func(w http.ResponseWriter, r *http.Request) {
		if rr.CreateScene == nil {
			slog.Panicf("No handler exists for POST service.scene/scenes")
		}

		body := &CreateSceneRequest{}
		if err := request.Decode(r, body); err != nil {
			slog.Errorf("Failed to decode request: %v", err)
			response.WriteJSON(w, err)
			return
		}

		if err := body.Validate(); err != nil {
			slog.Errorf("Failed to validate request: %v", err)
			response.WriteJSON(w, err)
			return
		}

		rsp, err := rr.CreateScene(body)
		if err != nil {
			slog.Errorf("Failed to handle request: %v", err)
			response.WriteJSON(w, err)
			return
		}

		response.WriteJSON(w, rsp)
	})

	rr.Router.Handle("GET", "/scene", func(w http.ResponseWriter, r *http.Request) {
		if rr.ReadScene == nil {
			slog.Panicf("No handler exists for GET service.scene/scene")
		}

		body := &ReadSceneRequest{}
		if err := request.Decode(r, body); err != nil {
			slog.Errorf("Failed to decode request: %v", err)
			response.WriteJSON(w, err)
			return
		}

		if err := body.Validate(); err != nil {
			slog.Errorf("Failed to validate request: %v", err)
			response.WriteJSON(w, err)
			return
		}

		rsp, err := rr.ReadScene(body)
		if err != nil {
			slog.Errorf("Failed to handle request: %v", err)
			response.WriteJSON(w, err)
			return
		}

		response.WriteJSON(w, rsp)
	})

	rr.Router.Handle("GET", "/scenes", func(w http.ResponseWriter, r *http.Request) {
		if rr.ListScenes == nil {
			slog.Panicf("No handler exists for GET service.scene/scenes")
		}

		body := &ListScenesRequest{}
		if err := request.Decode(r, body); err != nil {
			slog.Errorf("Failed to decode request: %v", err)
			response.WriteJSON(w, err)
			return
		}

		if err := body.Validate(); err != nil {
			slog.Errorf("Failed to validate request: %v", err)
			response.WriteJSON(w, err)
			return
		}

		rsp, err := rr.ListScenes(body)
		if err != nil {
			slog.Errorf("Failed to handle request: %v", err)
			response.WriteJSON(w, err)
			return
		}

		response.WriteJSON(w, rsp)
	})

	rr.Router.Handle("DELETE", "/scene", func(w http.ResponseWriter, r *http.Request) {
		if rr.DeleteScene == nil {
			slog.Panicf("No handler exists for DELETE service.scene/scene")
		}

		body := &DeleteSceneRequest{}
		if err := request.Decode(r, body); err != nil {
			slog.Errorf("Failed to decode request: %v", err)
			response.WriteJSON(w, err)
			return
		}

		if err := body.Validate(); err != nil {
			slog.Errorf("Failed to validate request: %v", err)
			response.WriteJSON(w, err)
			return
		}

		rsp, err := rr.DeleteScene(body)
		if err != nil {
			slog.Errorf("Failed to handle request: %v", err)
			response.WriteJSON(w, err)
			return
		}

		response.WriteJSON(w, rsp)
	})

	rr.Router.Handle("POST", "/scene/set", func(w http.ResponseWriter, r *http.Request) {
		if rr.SetScene == nil {
			slog.Panicf("No handler exists for POST service.scene/scene/set")
		}

		body := &SetSceneRequest{}
		if err := request.Decode(r, body); err != nil {
			slog.Errorf("Failed to decode request: %v", err)
			response.WriteJSON(w, err)
			return
		}

		if err := body.Validate(); err != nil {
			slog.Errorf("Failed to validate request: %v", err)
			response.WriteJSON(w, err)
			return
		}

		rsp, err := rr.SetScene(body)
		if err != nil {
			slog.Errorf("Failed to handle request: %v", err)
			response.WriteJSON(w, err)
			return
		}

		response.WriteJSON(w, rsp)
	})

	return rr
}

// Do makes performs the request
func (m *CreateSceneRequest) Do() (*CreateSceneResponse, error) {
	req := &rpc.Request{
		Method: "POST",
		URL:    "service.scene/scenes",
		Body:   m,
	}

	rsp := &CreateSceneResponse{}
	_, err := rpc.Do(req, rsp)
	return rsp, err
}

// Do makes performs the request
func (m *ReadSceneRequest) Do() (*ReadSceneResponse, error) {
	req := &rpc.Request{
		Method: "GET",
		URL:    "service.scene/scene",
		Body:   m,
	}

	rsp := &ReadSceneResponse{}
	_, err := rpc.Do(req, rsp)
	return rsp, err
}

// Do makes performs the request
func (m *ListScenesRequest) Do() (*ListScenesResponse, error) {
	req := &rpc.Request{
		Method: "GET",
		URL:    "service.scene/scenes",
		Body:   m,
	}

	rsp := &ListScenesResponse{}
	_, err := rpc.Do(req, rsp)
	return rsp, err
}

// Do makes performs the request
func (m *DeleteSceneRequest) Do() (*DeleteSceneResponse, error) {
	req := &rpc.Request{
		Method: "DELETE",
		URL:    "service.scene/scene",
		Body:   m,
	}

	rsp := &DeleteSceneResponse{}
	_, err := rpc.Do(req, rsp)
	return rsp, err
}

// Do makes performs the request
func (m *SetSceneRequest) Do() (*SetSceneResponse, error) {
	req := &rpc.Request{
		Method: "POST",
		URL:    "service.scene/scene/set",
		Body:   m,
	}

	rsp := &SetSceneResponse{}
	_, err := rpc.Do(req, rsp)
	return rsp, err
}
