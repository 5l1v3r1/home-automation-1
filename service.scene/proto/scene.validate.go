// Code generated by protoc-gen-jrpc. DO NOT EDIT.

package sceneproto

import (
	"time"

	"github.com/jakewright/home-automation/libraries/go/errors"
)

// Validate returns an error if any of the fields have bad values
func (m *Scene) Validate() error {
	for _, r := range m.Actions {
		if err := r.Validate(); err != nil {
			return err
		}
	}

	if m.CreatedAt != "" {
		if _, err := time.Parse(time.RFC3339Nano, m.CreatedAt); err != nil {
			return errors.WrapWithCode(err, errors.ErrBadRequest, "invalid time string in field created_at")
		}
	}

	if m.UpdatedAt != "" {
		if _, err := time.Parse(time.RFC3339Nano, m.UpdatedAt); err != nil {
			return errors.WrapWithCode(err, errors.ErrBadRequest, "invalid time string in field updated_at")
		}
	}

	if m.DeletedAt != "" {
		if _, err := time.Parse(time.RFC3339Nano, m.DeletedAt); err != nil {
			return errors.WrapWithCode(err, errors.ErrBadRequest, "invalid time string in field deleted_at")
		}
	}

	return nil
}

// Validate returns an error if any of the fields have bad values
func (m *Action) Validate() error {
	if m.CreatedAt != "" {
		if _, err := time.Parse(time.RFC3339Nano, m.CreatedAt); err != nil {
			return errors.WrapWithCode(err, errors.ErrBadRequest, "invalid time string in field created_at")
		}
	}

	if m.UpdatedAt != "" {
		if _, err := time.Parse(time.RFC3339Nano, m.UpdatedAt); err != nil {
			return errors.WrapWithCode(err, errors.ErrBadRequest, "invalid time string in field updated_at")
		}
	}

	if m.DeletedAt != "" {
		if _, err := time.Parse(time.RFC3339Nano, m.DeletedAt); err != nil {
			return errors.WrapWithCode(err, errors.ErrBadRequest, "invalid time string in field deleted_at")
		}
	}

	return nil
}

// Validate returns an error if any of the fields have bad values
func (m *CreateSceneRequest) Validate() error {
	for _, r := range m.Actions {
		if err := r.Validate(); err != nil {
			return err
		}
	}

	return nil
}

// Validate returns an error if any of the fields have bad values
func (m *CreateSceneRequest_Action) Validate() error {
	return nil
}

// Validate returns an error if any of the fields have bad values
func (m *CreateSceneResponse) Validate() error {
	if err := m.Scene.Validate(); err != nil {
		return err
	}

	return nil
}

// Validate returns an error if any of the fields have bad values
func (m *ReadSceneRequest) Validate() error {
	return nil
}

// Validate returns an error if any of the fields have bad values
func (m *ReadSceneResponse) Validate() error {
	if err := m.Scene.Validate(); err != nil {
		return err
	}

	return nil
}

// Validate returns an error if any of the fields have bad values
func (m *ListScenesRequest) Validate() error {
	return nil
}

// Validate returns an error if any of the fields have bad values
func (m *ListScenesResponse) Validate() error {
	for _, r := range m.Scenes {
		if err := r.Validate(); err != nil {
			return err
		}
	}

	return nil
}

// Validate returns an error if any of the fields have bad values
func (m *DeleteSceneRequest) Validate() error {
	return nil
}

// Validate returns an error if any of the fields have bad values
func (m *DeleteSceneResponse) Validate() error {
	return nil
}

// Validate returns an error if any of the fields have bad values
func (m *SetSceneRequest) Validate() error {
	return nil
}

// Validate returns an error if any of the fields have bad values
func (m *SetSceneResponse) Validate() error {
	return nil
}

// GetCreatedAtTime parses CreatedAt as a time
func (m *Scene) GetCreatedAtTime() time.Time {
	if m.GetCreatedAt() == "" {
		return time.Time{}
	}

	t, err := time.Parse(time.RFC3339Nano, m.GetCreatedAt())
	if err != nil {
		// Panic because this should not happen
		// if Validate() has already been called
		panic(err)
	}
	return t
}

// GetUpdatedAtTime parses UpdatedAt as a time
func (m *Scene) GetUpdatedAtTime() time.Time {
	if m.GetUpdatedAt() == "" {
		return time.Time{}
	}

	t, err := time.Parse(time.RFC3339Nano, m.GetUpdatedAt())
	if err != nil {
		// Panic because this should not happen
		// if Validate() has already been called
		panic(err)
	}
	return t
}

// GetDeletedAtTime parses DeletedAt as a time
func (m *Scene) GetDeletedAtTime() time.Time {
	if m.GetDeletedAt() == "" {
		return time.Time{}
	}

	t, err := time.Parse(time.RFC3339Nano, m.GetDeletedAt())
	if err != nil {
		// Panic because this should not happen
		// if Validate() has already been called
		panic(err)
	}
	return t
}

// GetCreatedAtTime parses CreatedAt as a time
func (m *Action) GetCreatedAtTime() time.Time {
	if m.GetCreatedAt() == "" {
		return time.Time{}
	}

	t, err := time.Parse(time.RFC3339Nano, m.GetCreatedAt())
	if err != nil {
		// Panic because this should not happen
		// if Validate() has already been called
		panic(err)
	}
	return t
}

// GetUpdatedAtTime parses UpdatedAt as a time
func (m *Action) GetUpdatedAtTime() time.Time {
	if m.GetUpdatedAt() == "" {
		return time.Time{}
	}

	t, err := time.Parse(time.RFC3339Nano, m.GetUpdatedAt())
	if err != nil {
		// Panic because this should not happen
		// if Validate() has already been called
		panic(err)
	}
	return t
}

// GetDeletedAtTime parses DeletedAt as a time
func (m *Action) GetDeletedAtTime() time.Time {
	if m.GetDeletedAt() == "" {
		return time.Time{}
	}

	t, err := time.Parse(time.RFC3339Nano, m.GetDeletedAt())
	if err != nil {
		// Panic because this should not happen
		// if Validate() has already been called
		panic(err)
	}
	return t
}
