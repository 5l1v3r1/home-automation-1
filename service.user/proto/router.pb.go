// Code generated by protoc-gen-jrpc. DO NOT EDIT.

package userproto

import (
	"net/http"

	"github.com/jakewright/home-automation/libraries/go/request"
	"github.com/jakewright/home-automation/libraries/go/response"
	"github.com/jakewright/home-automation/libraries/go/router"
	"github.com/jakewright/home-automation/libraries/go/rpc"
	"github.com/jakewright/home-automation/libraries/go/slog"
)

// UserRouter wraps router.Router to provide a convenient way to set handlers
type UserRouter struct {
	*router.Router
	GetUser func(*GetUserRequest) (*GetUserResponse, error)
}

// NewRouter returns a router that is ready to add handlers to
func NewRouter() *UserRouter {
	rr := &UserRouter{
		Router: router.New(),
	}

	rr.Router.Handle("GET", "/user/", func(w http.ResponseWriter, r *http.Request) {
		if rr.GetUser == nil {
			slog.Panicf("No handler exists for GET service.user/user/")
		}

		body := &GetUserRequest{}
		if err := request.Decode(r, body); err != nil {
			slog.Errorf("Failed to decode request: %v", err)
			response.WriteJSON(w, err)
			return
		}

		if err := body.Validate(); err != nil {
			slog.Errorf("Failed to validate request: %v", err)
			response.WriteJSON(w, err)
			return
		}

		rsp, err := rr.GetUser(body)
		if err != nil {
			slog.Errorf("Failed to handle request: %v", err)
			response.WriteJSON(w, err)
			return
		}

		response.WriteJSON(w, rsp)
	})

	return rr
}

// Do makes performs the request
func (m *GetUserRequest) Do() (*GetUserResponse, error) {
	req := &rpc.Request{
		Method: "GET",
		URL:    "service.user/user/",
		Body:   m,
	}

	rsp := &GetUserResponse{}
	_, err := rpc.Do(req, rsp)
	return rsp, err
}
