// Code generated by protoc-gen-jrpc. DO NOT EDIT.

package userproto

import (
	"time"

	"github.com/jakewright/home-automation/libraries/go/errors"
)

// Validate returns an error if any of the fields have bad values
func (m *User) Validate() error {
	if m.CreatedAt != "" {
		if _, err := time.Parse(time.RFC3339Nano, m.CreatedAt); err != nil {
			return errors.Wrap(err, errors.ErrBadRequest, "invalid time string in field created_at")
		}
	}

	if m.UpdatedAt != "" {
		if _, err := time.Parse(time.RFC3339Nano, m.UpdatedAt); err != nil {
			return errors.Wrap(err, errors.ErrBadRequest, "invalid time string in field updated_at")
		}
	}

	return nil
}

// Validate returns an error if any of the fields have bad values
func (m *GetUserRequest) Validate() error {
	return nil
}

// Validate returns an error if any of the fields have bad values
func (m *GetUserResponse) Validate() error {
	if err := m.User.Validate(); err != nil {
		return err
	}

	return nil
}

// GetCreatedAtTime parses CreatedAt as a time
func (m *User) GetCreatedAtTime() time.Time {
	if m.GetCreatedAt() == "" {
		return time.Time{}
	}

	t, err := time.Parse(time.RFC3339Nano, m.GetCreatedAt())
	if err != nil {
		// Panic because this should not happen
		// if Validate() has already been called
		panic(err)
	}
	return t
}

// GetUpdatedAtTime parses UpdatedAt as a time
func (m *User) GetUpdatedAtTime() time.Time {
	if m.GetUpdatedAt() == "" {
		return time.Time{}
	}

	t, err := time.Parse(time.RFC3339Nano, m.GetUpdatedAt())
	if err != nil {
		// Panic because this should not happen
		// if Validate() has already been called
		panic(err)
	}
	return t
}
