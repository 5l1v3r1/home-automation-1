// Code generated by jrpc. DO NOT EDIT.

package handler

import (
	context "context"
	http "net/http"

	"github.com/jakewright/home-automation/libraries/go/oops"
	"github.com/jakewright/home-automation/libraries/go/request"
	"github.com/jakewright/home-automation/libraries/go/response"
	"github.com/jakewright/home-automation/libraries/go/router"
	"github.com/jakewright/home-automation/libraries/go/slog"
	def "github.com/jakewright/home-automation/service.user/def"
)

// Request wraps http.Request but exposes the context
type Request struct {
	context.Context
	*http.Request
}

// UserRouter wraps router.Router to provide a convenient way to set handlers
type UserRouter struct {
	*router.Router
	getUser              func(*Request, *def.GetUserRequest) (*def.GetUserResponse, error)
	listUsers            func(*Request, *def.ListUsersRequest) (*def.ListUsersResponse, error)
	getUserHandlerFunc   http.HandlerFunc
	listUsersHandlerFunc http.HandlerFunc
}

// NewRouter returns a router that is ready to add handlers to
func NewRouter() *UserRouter {
	rr := &UserRouter{
		Router: router.New(),
	}

	rr.getUserHandlerFunc = func(w http.ResponseWriter, r *http.Request) {
		if rr.getUser == nil {
			slog.Panicf("No handler exists for GET /user")
		}

		body := &def.GetUserRequest{}
		if err := request.Decode(r, body); err != nil {
			err = oops.Wrap(err, oops.ErrBadRequest, "failed to decode request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		if err := body.Validate(); err != nil {
			err = oops.Wrap(err, oops.ErrBadRequest, "failed to validate request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		req := &Request{
			Context: r.Context(),
			Request: r,
		}

		rsp, err := rr.getUser(req, body)
		if err != nil {
			err = oops.WithMessage(err, "failed to handle request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		response.WriteJSON(w, rsp)
	}

	rr.Router.Handle("GET", "/user", rr.getUserHandlerFunc)

	rr.listUsersHandlerFunc = func(w http.ResponseWriter, r *http.Request) {
		if rr.listUsers == nil {
			slog.Panicf("No handler exists for GET /users")
		}

		body := &def.ListUsersRequest{}
		if err := request.Decode(r, body); err != nil {
			err = oops.Wrap(err, oops.ErrBadRequest, "failed to decode request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		if err := body.Validate(); err != nil {
			err = oops.Wrap(err, oops.ErrBadRequest, "failed to validate request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		req := &Request{
			Context: r.Context(),
			Request: r,
		}

		rsp, err := rr.listUsers(req, body)
		if err != nil {
			err = oops.WithMessage(err, "failed to handle request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		response.WriteJSON(w, rsp)
	}

	rr.Router.Handle("GET", "/users", rr.listUsersHandlerFunc)

	return rr
}

func (r *UserRouter) GetUser(f func(*Request, *def.GetUserRequest) (*def.GetUserResponse, error)) *UserRouter {
	r.getUser = f
	return r
}

func (r *UserRouter) ListUsers(f func(*Request, *def.ListUsersRequest) (*def.ListUsersResponse, error)) *UserRouter {
	r.listUsers = f
	return r
}
