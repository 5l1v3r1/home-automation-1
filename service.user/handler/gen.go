// Code generated by jrpc. DO NOT EDIT.

package handler

import (
	context "context"
	http "net/http"

	network "github.com/jakewright/home-automation/libraries/go/network"
	oops "github.com/jakewright/home-automation/libraries/go/oops"
	router "github.com/jakewright/home-automation/libraries/go/router"
	slog "github.com/jakewright/home-automation/libraries/go/slog"
	def "github.com/jakewright/home-automation/service.user/def"
)

type controller interface {
	GetUser(*request, *def.GetUserRequest) (*def.GetUserResponse, error)
	ListUsers(*request, *def.ListUsersRequest) (*def.ListUsersResponse, error)
}

type request struct {
	context.Context
	*http.Request
}

// NewRouter returns a router with appropriate handlers set
func NewRouter(c controller) *router.Router {
	r := router.New()

	r.Handle("GET", "/user", func(w http.ResponseWriter, r *http.Request) {
		body := &def.GetUserRequest{}
		if err := network.DecodeRequest(r, body); err != nil {
			err = oops.Wrap(err, oops.ErrBadRequest, "failed to decode request")
			slog.Error(err)
			network.WriteJSONResponse(w, err)
			return
		}

		if err := body.Validate(); err != nil {
			err = oops.Wrap(err, oops.ErrBadRequest, "failed to validate request")
			slog.Error(err)
			network.WriteJSONResponse(w, err)
			return
		}

		req := &request{
			Context: r.Context(),
			Request: r,
		}

		rsp, err := c.GetUser(req, body)
		if err != nil {
			err = oops.WithMessage(err, "failed to handle request")
			slog.Error(err)
			network.WriteJSONResponse(w, err)
			return
		}

		network.WriteJSONResponse(w, rsp)
	})

	r.Handle("GET", "/users", func(w http.ResponseWriter, r *http.Request) {
		body := &def.ListUsersRequest{}
		if err := network.DecodeRequest(r, body); err != nil {
			err = oops.Wrap(err, oops.ErrBadRequest, "failed to decode request")
			slog.Error(err)
			network.WriteJSONResponse(w, err)
			return
		}

		if err := body.Validate(); err != nil {
			err = oops.Wrap(err, oops.ErrBadRequest, "failed to validate request")
			slog.Error(err)
			network.WriteJSONResponse(w, err)
			return
		}

		req := &request{
			Context: r.Context(),
			Request: r,
		}

		rsp, err := c.ListUsers(req, body)
		if err != nil {
			err = oops.WithMessage(err, "failed to handle request")
			slog.Error(err)
			network.WriteJSONResponse(w, err)
			return
		}

		network.WriteJSONResponse(w, rsp)
	})

	return r
}
