// Code generated by jrpc. DO NOT EDIT.

package handler

import (
	"net/http"

	"github.com/jakewright/home-automation/libraries/go/errors"
	"github.com/jakewright/home-automation/libraries/go/request"
	"github.com/jakewright/home-automation/libraries/go/response"
	"github.com/jakewright/home-automation/libraries/go/router"
	"github.com/jakewright/home-automation/libraries/go/slog"
	def "github.com/jakewright/home-automation/service.device-registry/def"
)

// DeviceRegistryRouter wraps router.Router to provide a convenient way to set handlers
type DeviceRegistryRouter struct {
	*router.Router
	GetDevice   func(*def.GetDeviceRequest) (*def.GetDeviceResponse, error)
	ListDevices func(*def.ListDevicesRequest) (*def.ListDevicesResponse, error)
	GetRoom     func(*def.GetRoomRequest) (*def.GetRoomResponse, error)
	ListRooms   func(*def.ListRoomsRequest) (*def.ListRoomsResponse, error)
}

// NewRouter returns a router that is ready to add handlers to
func NewRouter() *DeviceRegistryRouter {
	rr := &DeviceRegistryRouter{
		Router: router.New(),
	}

	rr.Router.Handle("GET", "/device", func(w http.ResponseWriter, r *http.Request) {
		if rr.GetDevice == nil {
			slog.Panicf("No handler exists for GET /device")
		}

		body := &def.GetDeviceRequest{
			Request: r,
			Context: r.Context(),
		}
		if err := request.Decode(r, body); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to decode request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		if err := body.Validate(); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to validate request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		rsp, err := rr.GetDevice(body)
		if err != nil {
			err = errors.WithMessage(err, "failed to handle request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		response.WriteJSON(w, rsp)
	})

	rr.Router.Handle("GET", "/devices", func(w http.ResponseWriter, r *http.Request) {
		if rr.ListDevices == nil {
			slog.Panicf("No handler exists for GET /devices")
		}

		body := &def.ListDevicesRequest{
			Request: r,
			Context: r.Context(),
		}
		if err := request.Decode(r, body); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to decode request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		if err := body.Validate(); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to validate request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		rsp, err := rr.ListDevices(body)
		if err != nil {
			err = errors.WithMessage(err, "failed to handle request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		response.WriteJSON(w, rsp)
	})

	rr.Router.Handle("GET", "/room", func(w http.ResponseWriter, r *http.Request) {
		if rr.GetRoom == nil {
			slog.Panicf("No handler exists for GET /room")
		}

		body := &def.GetRoomRequest{
			Request: r,
			Context: r.Context(),
		}
		if err := request.Decode(r, body); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to decode request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		if err := body.Validate(); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to validate request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		rsp, err := rr.GetRoom(body)
		if err != nil {
			err = errors.WithMessage(err, "failed to handle request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		response.WriteJSON(w, rsp)
	})

	rr.Router.Handle("GET", "/rooms", func(w http.ResponseWriter, r *http.Request) {
		if rr.ListRooms == nil {
			slog.Panicf("No handler exists for GET /rooms")
		}

		body := &def.ListRoomsRequest{
			Request: r,
			Context: r.Context(),
		}
		if err := request.Decode(r, body); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to decode request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		if err := body.Validate(); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to validate request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		rsp, err := rr.ListRooms(body)
		if err != nil {
			err = errors.WithMessage(err, "failed to handle request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		response.WriteJSON(w, rsp)
	})

	return rr
}
