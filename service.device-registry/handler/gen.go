// Code generated by jrpc. DO NOT EDIT.

package handler

import (
	context "context"
	http "net/http"

	"github.com/jakewright/home-automation/libraries/go/errors"
	"github.com/jakewright/home-automation/libraries/go/request"
	"github.com/jakewright/home-automation/libraries/go/response"
	"github.com/jakewright/home-automation/libraries/go/router"
	"github.com/jakewright/home-automation/libraries/go/slog"
	def "github.com/jakewright/home-automation/service.device-registry/def"
)

// Request wraps http.Request but exposes the context
type Request struct {
	context.Context
	*http.Request
}

// DeviceRegistryRouter wraps router.Router to provide a convenient way to set handlers
type DeviceRegistryRouter struct {
	*router.Router
	getDevice              func(*Request, *def.GetDeviceRequest) (*def.GetDeviceResponse, error)
	listDevices            func(*Request, *def.ListDevicesRequest) (*def.ListDevicesResponse, error)
	getRoom                func(*Request, *def.GetRoomRequest) (*def.GetRoomResponse, error)
	listRooms              func(*Request, *def.ListRoomsRequest) (*def.ListRoomsResponse, error)
	getDeviceHandlerFunc   http.HandlerFunc
	listDevicesHandlerFunc http.HandlerFunc
	getRoomHandlerFunc     http.HandlerFunc
	listRoomsHandlerFunc   http.HandlerFunc
}

// NewRouter returns a router that is ready to add handlers to
func NewRouter() *DeviceRegistryRouter {
	rr := &DeviceRegistryRouter{
		Router: router.New(),
	}

	rr.getDeviceHandlerFunc = func(w http.ResponseWriter, r *http.Request) {
		if rr.getDevice == nil {
			slog.Panicf("No handler exists for GET /device")
		}

		body := &def.GetDeviceRequest{}
		if err := request.Decode(r, body); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to decode request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		if err := body.Validate(); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to validate request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		req := &Request{
			Context: r.Context(),
			Request: r,
		}

		rsp, err := rr.getDevice(req, body)
		if err != nil {
			err = errors.WithMessage(err, "failed to handle request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		response.WriteJSON(w, rsp)
	}

	rr.Router.Handle("GET", "/device", rr.getDeviceHandlerFunc)

	rr.listDevicesHandlerFunc = func(w http.ResponseWriter, r *http.Request) {
		if rr.listDevices == nil {
			slog.Panicf("No handler exists for GET /devices")
		}

		body := &def.ListDevicesRequest{}
		if err := request.Decode(r, body); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to decode request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		if err := body.Validate(); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to validate request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		req := &Request{
			Context: r.Context(),
			Request: r,
		}

		rsp, err := rr.listDevices(req, body)
		if err != nil {
			err = errors.WithMessage(err, "failed to handle request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		response.WriteJSON(w, rsp)
	}

	rr.Router.Handle("GET", "/devices", rr.listDevicesHandlerFunc)

	rr.getRoomHandlerFunc = func(w http.ResponseWriter, r *http.Request) {
		if rr.getRoom == nil {
			slog.Panicf("No handler exists for GET /room")
		}

		body := &def.GetRoomRequest{}
		if err := request.Decode(r, body); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to decode request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		if err := body.Validate(); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to validate request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		req := &Request{
			Context: r.Context(),
			Request: r,
		}

		rsp, err := rr.getRoom(req, body)
		if err != nil {
			err = errors.WithMessage(err, "failed to handle request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		response.WriteJSON(w, rsp)
	}

	rr.Router.Handle("GET", "/room", rr.getRoomHandlerFunc)

	rr.listRoomsHandlerFunc = func(w http.ResponseWriter, r *http.Request) {
		if rr.listRooms == nil {
			slog.Panicf("No handler exists for GET /rooms")
		}

		body := &def.ListRoomsRequest{}
		if err := request.Decode(r, body); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to decode request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		if err := body.Validate(); err != nil {
			err = errors.Wrap(err, errors.ErrBadRequest, "failed to validate request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		req := &Request{
			Context: r.Context(),
			Request: r,
		}

		rsp, err := rr.listRooms(req, body)
		if err != nil {
			err = errors.WithMessage(err, "failed to handle request")
			slog.Error(err)
			response.WriteJSON(w, err)
			return
		}

		response.WriteJSON(w, rsp)
	}

	rr.Router.Handle("GET", "/rooms", rr.listRoomsHandlerFunc)

	return rr
}

func (r *DeviceRegistryRouter) GetDevice(f func(*Request, *def.GetDeviceRequest) (*def.GetDeviceResponse, error)) *DeviceRegistryRouter {
	r.getDevice = f
	return r
}

func (r *DeviceRegistryRouter) ListDevices(f func(*Request, *def.ListDevicesRequest) (*def.ListDevicesResponse, error)) *DeviceRegistryRouter {
	r.listDevices = f
	return r
}

func (r *DeviceRegistryRouter) GetRoom(f func(*Request, *def.GetRoomRequest) (*def.GetRoomResponse, error)) *DeviceRegistryRouter {
	r.getRoom = f
	return r
}

func (r *DeviceRegistryRouter) ListRooms(f func(*Request, *def.ListRoomsRequest) (*def.ListRoomsResponse, error)) *DeviceRegistryRouter {
	r.listRooms = f
	return r
}
