// Code generated by jrpc. DO NOT EDIT.

package handler

import (
	context "context"
	http "net/http"

	taxi "github.com/jakewright/home-automation/libraries/go/taxi"
	def "github.com/jakewright/home-automation/services/device-registry/def"
)

// taxiRouter is an interface implemented by taxi.Router
type taxiRouter interface {
	HandleFunc(method, path string, handler func(context.Context, taxi.Decoder) (interface{}, error))
}

type handler interface {
	GetDevice(ctx context.Context, body *def.GetDeviceRequest) (*def.GetDeviceResponse, error)
	ListDevices(ctx context.Context, body *def.ListDevicesRequest) (*def.ListDevicesResponse, error)
	GetRoom(ctx context.Context, body *def.GetRoomRequest) (*def.GetRoomResponse, error)
	ListRooms(ctx context.Context, body *def.ListRoomsRequest) (*def.ListRoomsResponse, error)
}

// RegisterRoutes adds the service's routes to the router
func RegisterRoutes(r taxiRouter, h handler) {
	r.HandleFunc("GET", "/device", func(ctx context.Context, decode taxi.Decoder) (interface{}, error) {
		body := &def.GetDeviceRequest{}
		if err := decode(body); err != nil {
			return nil, err
		}

		if err := body.Validate(); err != nil {
			return nil, err
		}

		return h.GetDevice(ctx, body)
	})

	r.HandleFunc("GET", "/devices", func(ctx context.Context, decode taxi.Decoder) (interface{}, error) {
		body := &def.ListDevicesRequest{}
		if err := decode(body); err != nil {
			return nil, err
		}

		if err := body.Validate(); err != nil {
			return nil, err
		}

		return h.ListDevices(ctx, body)
	})

	r.HandleFunc("GET", "/room", func(ctx context.Context, decode taxi.Decoder) (interface{}, error) {
		body := &def.GetRoomRequest{}
		if err := decode(body); err != nil {
			return nil, err
		}

		if err := body.Validate(); err != nil {
			return nil, err
		}

		return h.GetRoom(ctx, body)
	})

	r.HandleFunc("GET", "/rooms", func(ctx context.Context, decode taxi.Decoder) (interface{}, error) {
		body := &def.ListRoomsRequest{}
		if err := decode(body); err != nil {
			return nil, err
		}

		if err := body.Validate(); err != nil {
			return nil, err
		}

		return h.ListRooms(ctx, body)
	})

}

// newHandler returns a handler that serves requests for
// this service. This is not exported as it is only used by
// tests. A service's main() function should create its own
// router (typically via bootstrap) and then use RegisterRoutes().
func newHandler(h handler) http.Handler {
	r := taxi.NewRouter()
	RegisterRoutes(r, h)
	return r
}
