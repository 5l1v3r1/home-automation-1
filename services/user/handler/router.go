// Code generated by jrpc. DO NOT EDIT.

package handler

import (
	context "context"

	"github.com/jakewright/home-automation/libraries/go/bootstrap"
	router "github.com/jakewright/home-automation/libraries/go/router"
	taxi "github.com/jakewright/home-automation/libraries/go/taxi"
	def "github.com/jakewright/home-automation/services/user/def"
)

type handler interface {
	GetUser(ctx context.Context, body *def.GetUserRequest) (*def.GetUserResponse, error)
	ListUsers(ctx context.Context, body *def.ListUsersRequest) (*def.ListUsersResponse, error)
}

// NewRouter creates a new router for the service
func NewRouter(svc *bootstrap.Service, h handler) *router.Router {
	r := router.New(svc)

	r.RegisterHandler("GET", "/user", func(ctx context.Context, decode taxi.Decoder) (interface{}, error) {
		body := &def.GetUserRequest{}
		if err := decode(body); err != nil {
			return nil, err
		}

		if err := body.Validate(); err != nil {
			return nil, err
		}

		return h.GetUser(ctx, body)
	})

	r.RegisterHandler("GET", "/users", func(ctx context.Context, decode taxi.Decoder) (interface{}, error) {
		body := &def.ListUsersRequest{}
		if err := decode(body); err != nil {
			return nil, err
		}

		if err := body.Validate(); err != nil {
			return nil, err
		}

		return h.ListUsers(ctx, body)
	})

	return r
}
