// Code generated by jrpc. DO NOT EDIT.

package handler

import (
	context "context"

	"github.com/jakewright/home-automation/libraries/go/bootstrap"
	router "github.com/jakewright/home-automation/libraries/go/router"
	taxi "github.com/jakewright/home-automation/libraries/go/taxi"
	def "github.com/jakewright/home-automation/services/dmx/def"
)

type handler interface {
	GetDevice(ctx context.Context, body *def.GetDeviceRequest) (*def.GetDeviceResponse, error)
	UpdateDevice(ctx context.Context, body *def.UpdateDeviceRequest) (*def.UpdateDeviceResponse, error)
}

// NewRouter creates a new router for the service
func NewRouter(svc *bootstrap.Service, h handler) *router.Router {
	r := router.New(svc)

	r.RegisterHandler("GET", "/device", func(ctx context.Context, decode taxi.Decoder) (interface{}, error) {
		body := &def.GetDeviceRequest{}
		if err := decode(body); err != nil {
			return nil, err
		}

		if err := body.Validate(); err != nil {
			return nil, err
		}

		return h.GetDevice(ctx, body)
	})

	r.RegisterHandler("PATCH", "/device", func(ctx context.Context, decode taxi.Decoder) (interface{}, error) {
		body := &def.UpdateDeviceRequest{}
		if err := decode(body); err != nil {
			return nil, err
		}

		if err := body.Validate(); err != nil {
			return nil, err
		}

		return h.UpdateDevice(ctx, body)
	})

	return r
}
