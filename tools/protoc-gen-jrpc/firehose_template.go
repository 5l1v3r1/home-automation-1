package main

import (
	"text/template"

	"github.com/jakewright/home-automation/libraries/go/protoparse"
	jrpcproto "github.com/jakewright/home-automation/tools/protoc-gen-jrpc/proto"
)

var firehoseTemplate *template.Template

func init() {
	var err error
	firehoseTemplate, err = template.New("firehose_template").Parse(firehoseTemplateText)
	if err != nil {
		panic(err)
	}
}

type event struct {
	TypeName  string
	EventName string
}

type firehoseData struct {
	PackageName string
	Events      []*event
}

const firehoseTemplateText = `// Code generated by protoc-gen-jrpc. DO NOT EDIT.

package {{ .PackageName }}

import (
	"encoding/json"

	"github.com/jakewright/home-automation/libraries/go/errors"
	"github.com/jakewright/home-automation/libraries/go/firehose"
)

{{ range .Events }}
	// Publish publishes the event to the Firehose
	func (e *{{ .TypeName }}) Publish() error {
		if err := e.Validate(); err != nil {
			return err
		}

		return firehose.Publish("{{ .EventName }}", e)
	}

	type {{ .TypeName }}Handler func(*{{ .TypeName }}) firehose.Result

	func (h {{ .TypeName }}Handler) EventName() string {
		return "{{ .EventName }}"
	}

	func (h {{ .TypeName }}Handler) HandleEvent(e *firehose.Event) firehose.Result {
		var body {{ .TypeName }}
		if err := json.Unmarshal(e.Payload, &body); err != nil {
			return firehose.Discard(errors.WithMessage(err, "failed to unmarshal payload"))
		}
		return h(&body)
	}
{{ end }}
`

func createFirehoseTemplateData(file *protoparse.File) (*firehoseData, error) {
	var events []*event
	for _, m := range file.Messages {
		opts, err := m.GetExtension(jrpcproto.E_Event)
		if err != nil {
			return nil, err
		}
		ev := opts.(*jrpcproto.Event)

		if ev.GetName() == "" {
			continue
		}

		events = append(events, &event{
			TypeName:  m.GoTypeName,
			EventName: ev.GetName(),
		})
	}

	return &firehoseData{
		PackageName: file.GoPackage,
		Events:      events,
	}, nil
}
