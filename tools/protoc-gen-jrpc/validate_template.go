package main

import (
	"fmt"
	"text/template"

	"github.com/jakewright/home-automation/libraries/go/protoparse"
	jrpcproto "github.com/jakewright/home-automation/tools/protoc-gen-jrpc/proto"
)

var validateTemplate *template.Template

func init() {
	var err error
	validateTemplate, err = template.New("validate_template").Parse(validateTemplateText)
	if err != nil {
		panic(err)
	}
}

type message struct {
	Name   string
	Fields []*field
}

type field struct {
	Repeated      bool
	JSONName      string
	GoName        string
	IsMessageType bool
	Time          bool
}

type validateData struct {
	PackageName string
	Imports     []*protoparse.Import
	Messages    []*message
}

const validateTemplateText = `// Code generated by protoc-gen-jrpc. DO NOT EDIT.

package {{ .PackageName }}

{{ if .Imports }}
	import (
		{{- range .Imports }}
			{{ .Alias }} "{{ .Path }}"
		{{- end }}
	)
{{ end }}

{{ range $message := .Messages }}
	// Validate returns an error if any of the fields have bad values
	func (m *{{ $message.Name }}) Validate() error {
		{{- range $field := $message.Fields -}}
			{{ if $field.Time }}
				if m.{{ $field.GoName }} != "" {
					if _, err := time.Parse(time.RFC3339Nano, m.{{ $field.GoName }}); err != nil {
						return errors.Wrap(err, errors.ErrBadRequest, "invalid time string in field {{ $field.JSONName }}")
					}
				}

			{{ end -}}

			{{- if $field.IsMessageType -}}
				{{- if $field.Repeated -}}
					for _, r := range m.{{ $field.GoName }} {
						if err := r.Validate(); err != nil {
							return err
						}
					}
				{{ else -}}
					if err := m.{{ $field.GoName }}.Validate(); err != nil {
						return err
					}
				{{ end }}
			{{ end -}}
		{{- end -}}

		return nil
	}
{{ end }}

{{ range $message := .Messages }}
	{{ range $field := $message.Fields }}
		{{ if $field.Time }}
			// Get{{ $field.GoName }}Time parses {{ $field.GoName }} as a time 
			func (m *{{ $message.Name }}) Get{{ $field.GoName }}Time() time.Time {
				if m.Get{{ $field.GoName }}() == "" {
					return time.Time{}
				}
	
				t, err := time.Parse(time.RFC3339Nano, m.Get{{ $field.GoName }}())
				if err != nil {
					// Panic because this should not happen 
					// if Validate() has already been called
					panic(err)
				}
				return t
			}
		{{ end }}
	{{ end }}
{{ end -}}

`

func createValidateTemplateData(file *protoparse.File) (*validateData, error) {
	var needTimeImport, needErrorImport bool

	messages := make([]*message, len(file.Messages))
	for i, m := range file.Messages {
		fields := make([]*field, len(m.Fields))
		for j, f := range m.Fields {
			messageType := f.TypeName == "TYPE_MESSAGE"
			needErrorImport = needErrorImport || messageType

			fields[j] = &field{
				Repeated:      f.Repeated,
				JSONName:      f.Name,
				GoName:        f.GoName,
				IsMessageType: messageType,
			}

			timeField, err := isTimeField(f)
			if err != nil {
				return nil, err
			}
			if timeField {
				needTimeImport = true
				needErrorImport = true
			}
			fields[j].Time = timeField
		}

		messages[i] = &message{
			Name:   m.GoTypeName,
			Fields: fields,
		}
	}

	imports := file.Imports
	if needTimeImport {
		imports = append(imports, &protoparse.Import{Alias: "", Path: "time"})
	}
	if needErrorImport {
		imports = append(imports, &protoparse.Import{Alias: "", Path: "github.com/jakewright/home-automation/libraries/go/errors"})
	}

	return &validateData{
		PackageName: file.GoPackage,
		Imports:     imports,
		Messages:    messages,
	}, nil
}

func isTimeField(f *protoparse.Field) (bool, error) {
	opts, err := f.GetExtension(jrpcproto.E_Time)
	if err != nil {
		return false, err
	}

	// Cast to *bool (we know it's this because it's defined as a bool in jrpc.proto)
	if set := opts.(*bool); set != nil && *set {
		// Make sure the field has type string otherwise the helpers that are generated won't work
		if f.TypeName != "TYPE_STRING" {
			return false, fmt.Errorf("time option can only be set on string fields but field %s has type %s", f.Name, f.TypeName)
		}

		return true, nil
	}

	return false, nil
}
