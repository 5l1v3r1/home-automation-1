package {{ .PackageName }}

{{ if .Imports }}
	import (
		{{- range .Imports }}
			{{ .Alias }} "{{ .Path }}"
		{{- end}}
	)
{{- end }}

{{ range $device := .Devices }}
	type {{ $device.Name }}Properties struct {
		{{- range $p := $device.Properties }}
			{{ $p.NamePascal }} *{{ $p.GoType }}
		{{- end }}
	}

	func (p *{{ $device.Name }}Properties) unmarshal(m map[string]interface{}) error {
		for property, value := range m {
			switch property {
				{{- range $p := $device.Properties }}
					case "{{ $p.NameSnake }}":
						{{ if eq $p.Type "int" -}}
							f, ok := value.(float64)
							if !ok {
								return oops.BadRequest("property '{{ $p.NameSnake }}' was unexpected type")
							}

							i := int64(f)
							if f != float64(i) {
								return oops.BadRequest("property '{{ $p.NameSnake }}' should be an integer")
							}

							{{ if $p.Min -}}
								if i < {{ $p.Min }} {
									return oops.BadRequest("property '{{ $p.NameSnake }}' should be ≥ {{ $p.Min }}")
								}
							{{- end }}

							{{ if $p.Max -}}
								if i > {{ $p.Max }} {
									return oops.BadRequest("property '{{ $p.NameSnake }}' should be ≤ {{ $p.Max }}")
								}
							{{- end }}

							p.{{ $p.NamePascal }} = &i

						{{ else if eq $p.Type "bool" -}}
							b, ok := value.(bool)
							if !ok {
								return oops.BadRequest("property '{{ $p.NameSnake }}' was unexpected type",)
							}

							p.{{ $p.NamePascal }} = &b

						{{ else if eq $p.Type "string" -}}
							s, ok := value.(string)
							if !ok {
								return oops.BadRequest("property '{{ $p.NameSnake }}' was unexpected type")
							}

							{{ if $p.Options -}}
								switch s {
									{{- range $op := $p.Options }}
									case "{{ $op.Value }}":
									{{ end -}}
									default:
										return oops.BadRequest("property '{{ $p.NameSnake }}' received invalid option: %s", s)
								}
							{{- end }}

							p.{{ $p.NamePascal }} = &s

						{{ else if eq $p.Type "rgb" -}}
							s, ok := value.(string)
							if !ok {
								return oops.BadRequest("property '{{ $p.NameSnake }}' was unexpected type")
							}

							rgb := &device.RGB{}
							if err := rgb.UnmarshalText([]byte(s)); err != nil {
								return oops.WithMessage(err, "property '{{ $p.NameSnake }}': failed to parse %q as RGB value", s)
							}

							p.{{ $p.NamePascal }} = rgb
						{{ end }}
				{{- end }}

				default:
					return oops.BadRequest("property %q not known", property)
			}
		}

		return nil
	}

	func (p *{{ $device.Name }}Properties) describe() map[string]*def.Property {
		return map[string]*def.Property{
			{{- range $p := $device.Properties }}
				"{{ $p.NameSnake }}": {
					Value: p.{{ $p.NamePascal }},
					Type: "{{ $p.Type }}",
					{{ if $p.Min }} Min: ptr.Float64({{ $p.Min }}),{{ end }}
					{{ if $p.Max }} Max: ptr.Float64({{ $p.Max }}),{{ end }}
					{{ if $p.Options -}}
						Options: []*def.Option{
							{{- range $option := $p.Options }}
								{Value: "{{ $option.Value }}", Name: "{{ $option.Name }}"},
							{{- end }}
						},
					{{- end }}
				},
			{{- end }}
		}
	}
{{- end }}
