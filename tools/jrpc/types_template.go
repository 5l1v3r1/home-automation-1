package main

import (
	"html/template"

	"github.com/jakewright/home-automation/libraries/go/svcdef"
)

var typesTemplate *template.Template

func init() {
	var err error
	typesTemplate, err = template.New("types_template").Parse(typesTemplateText)
	if err != nil {
		panic(err)
	}
}

type message struct {
	Name   string
	Fields []*field
}

type field struct {
	GoName        string
	JSONName      string
	Type          string
	IsMessageType bool
	Repeated      bool
	Pointer       bool
	Required      bool
}

type typesData struct {
	PackageName string
	Imports     []*imp
	Messages    []*message
}

const typesTemplateText = `// Code generated by protoc-gen-jrpc. DO NOT EDIT.

package {{ .PackageName }}

{{ if .Imports }}
	import (
		{{- range .Imports }}
			{{ .Alias }} "{{ .Path }}"
		{{- end}}
	)
{{- end }}

{{ range $message := .Messages }}
	// {{ $message.Name }} is defined in the .def file
	type {{ $message.Name }} struct {
		{{- range $field := .Fields }}
			{{ $field.GoName }} {{ $field.Type }} ` + "`" + `json:"{{ $field.JSONName }}"` + "`" + `
		{{- end }}
	}

	// Validate returns an error if any of the fields have bad values
	func (m *{{ $message.Name }}) Validate() error {
		{{ range $field := $message.Fields -}}
			{{ if $field.IsMessageType -}}
				{{ if $field.Repeated -}}
					{{ if $field.Pointer -}}
						if m.{{ $field.GoName }} != nil {
							for _, r := range *m.{{ $field.GoName }} {
								if err := r.Validate(); err != nil {
									return err
								}
							}
						}
					{{ else -}}
						for _, r := range m.{{ $field.GoName }} {
							if err := r.Validate(); err != nil {
								return err
							}
						}
					{{ end -}}
				{{ else -}}
					if err := m.{{ $field.GoName }}.Validate(); err != nil {
						return err
					}
				{{ end }}
			{{ end -}}

			{{ if $field.Required -}}
				{{ if $field.Pointer -}}
					if m.{{ $field.GoName }} == nil {
				{{ else if $field.Repeated -}}
					if len(m.{{ $field.GoName }}) == 0 {
				{{ else if eq $field.Type "[]byte" -}}
					if len(m.{{ $field.GoName }}) == 0 {
				{{ else if eq $field.Type "string" -}}
					if m.{{ $field.GoName }} == "" {
				{{ else if eq $field.Type "int32" "int64" "uint32" "uint64" "float32" "float64" -}}
					if m.{{ $field.GoName }} == 0 {
				{{ else if eq $field.Type "time.Time" -}} 
					if m.{{ $field.GoName }}.IsZero() {
				{{ else }}
					if true {
				{{ end -}}
					return errors.BadRequest("field {{ $field.JSONName }} is required")
				}
			{{ end }}
		{{ end -}}

		return nil
	}
{{ end }}

`

func createTypesTemplateData(opts *options, file *svcdef.File) (*typesData, error) {
	// Figure out the path of the package we're generating code for
	self, err := getGoImportPath(opts.DefPath, packageExternal)
	if err != nil {
		return nil, err
	}

	im := newImportManager(self)
	im.add("github.com/jakewright/home-automation/libraries/go/errors")

	messages, err := messagesFromFile(opts, file, im)
	if err != nil {
		return nil, err
	}

	return &typesData{
		PackageName: packageExternal,
		Imports:     im.get(),
		Messages:    messages,
	}, nil
}
